// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DRRMO
  LGU
  BU
  COMMUNITY
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Municipality {
  id               Int               @id @default(autoincrement())
  name             String
  barangays        Barangay[]
  landslideReports LandslideReport[]
}

model Barangay {
  id               Int               @id @default(autoincrement())
  name             String
  municipalityId   Int
  Municipality     Municipality      @relation(fields: [municipalityId], references: [id])
  landslideReports LandslideReport[]
}

model LandslideReport {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  dateOfIncident DateTime?
  timeOfIncident String?
  dateReported   DateTime?     @default(now())
  municipalityId Int?
  Municipality   Municipality? @relation(fields: [municipalityId], references: [id])
  barangayId     Int?
  Barangay       Barangay?     @relation(fields: [barangayId], references: [id])
  approvedBy     String?
  remarks        String?
  photo          String?
  status         Int?
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String   @unique
  role      Role
  createdAt DateTime @default(now())
}

model Metadata {
  id          Int       @id @default(autoincrement())
  readingType String
  device_sn   String
  device_name String
  port_number Int
  sensor_sn   String?
  sensor_name String
  units       String
  depth       String
  readings    Reading[]
}

model Reading {
  id                Int      @id @default(autoincrement())
  timestamp_utc     Int
  datetime          DateTime
  tz_offset         Int
  value             Float
  precision         Int
  mrid              Int
  error_flag        Boolean
  error_description String?
  metadataId        Int
  metadata          Metadata @relation(fields: [metadataId], references: [id])
}

model LastSuccessfulFetch {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
}
